#include<iostream>
using namespace std;

bool isSafe(int board[][10],int i,int j,int n)
{
    //check column
    for(int row=0;row<i;row++)
    {

        if(board[row][j]==1)
            return false;
    }

    //check left diagonal
    int x=i;
    int y=j;

    while(x>=0 &&y>=0)
    {
        if(board[x][y]==1)
            return false;

        x--;
        y--;

    }

    //check right diagonal
     x=i;
     y=j;

    while(x>=0 &&y<=n)
    {
        if(board[x][y]==1)
            return false;

        x--;
        y++;

    }

    return true;


}
bool solveNQueen(int board[][10],int i, int n){
//base case
if(i==n)
{
    //all queens placed successfully
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {

            if(board[i][j]==1)
            {
                cout<<"Q";
            }
            else{
                cout<<"_ ";
            }
        }
        cout<<endl;
    }
    return true;

}
//recursive
for(int j=0;j<n;j++)
{

    //safe place
    if(isSafe(board,i,j,n))
    {
        //place queen assuming i j is right position
        board[i][j]=1;
        bool nextQueenPlace=solveNQueen(board,i+1,n);
        if(nextQueenPlace)
        {
            return true;
        }
        //i ,j is not right position
        board[i][j]=0;


    }

}
//tried all position but can't place queen
return false;
}

int main()
{

    int n;
    cin>>n;
    int board[10][10]={0};
    solveNQueen(board,0,n);

    return 0;
}